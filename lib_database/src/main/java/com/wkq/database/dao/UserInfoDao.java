package com.wkq.database.dao;

import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "USER_INFO".
*/
public class UserInfoDao extends AbstractDao<UserInfo, String> {

    public static final String TABLENAME = "USER_INFO";

    /**
     * Properties of entity UserInfo.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property UserName = new Property(0, String.class, "UserName", false, "USER_NAME");
        public final static Property UserPhoneNum = new Property(1, String.class, "UserPhoneNum", true, "USER_PHONE_NUM");
        public final static Property UserPwd = new Property(2, String.class, "UserPwd", false, "USER_PWD");
        public final static Property UserIcon = new Property(3, String.class, "UserIcon", false, "USER_ICON");
        public final static Property IsLogout = new Property(4, boolean.class, "IsLogout", false, "IS_LOGOUT");
    }


    public UserInfoDao(DaoConfig config) {
        super(config);
    }
    
    public UserInfoDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"USER_INFO\" (" + //
                "\"USER_NAME\" TEXT NOT NULL ," + // 0: UserName
                "\"USER_PHONE_NUM\" TEXT PRIMARY KEY NOT NULL ," + // 1: UserPhoneNum
                "\"USER_PWD\" TEXT NOT NULL ," + // 2: UserPwd
                "\"USER_ICON\" TEXT NOT NULL ," + // 3: UserIcon
                "\"IS_LOGOUT\" INTEGER NOT NULL );"); // 4: IsLogout
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"USER_INFO\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, UserInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUserName());
 
        String UserPhoneNum = entity.getUserPhoneNum();
        if (UserPhoneNum != null) {
            stmt.bindString(2, UserPhoneNum);
        }
        stmt.bindString(3, entity.getUserPwd());
        stmt.bindString(4, entity.getUserIcon());
        stmt.bindLong(5, entity.getIsLogout() ? 1L: 0L);
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, UserInfo entity) {
        stmt.clearBindings();
        stmt.bindString(1, entity.getUserName());
 
        String UserPhoneNum = entity.getUserPhoneNum();
        if (UserPhoneNum != null) {
            stmt.bindString(2, UserPhoneNum);
        }
        stmt.bindString(3, entity.getUserPwd());
        stmt.bindString(4, entity.getUserIcon());
        stmt.bindLong(5, entity.getIsLogout() ? 1L: 0L);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1);
    }    

    @Override
    public UserInfo readEntity(Cursor cursor, int offset) {
        UserInfo entity = new UserInfo( //
            cursor.getString(offset + 0), // UserName
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // UserPhoneNum
            cursor.getString(offset + 2), // UserPwd
            cursor.getString(offset + 3), // UserIcon
            cursor.getShort(offset + 4) != 0 // IsLogout
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, UserInfo entity, int offset) {
        entity.setUserName(cursor.getString(offset + 0));
        entity.setUserPhoneNum(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setUserPwd(cursor.getString(offset + 2));
        entity.setUserIcon(cursor.getString(offset + 3));
        entity.setIsLogout(cursor.getShort(offset + 4) != 0);
     }
    
    @Override
    protected final String updateKeyAfterInsert(UserInfo entity, long rowId) {
        return entity.getUserPhoneNum();
    }
    
    @Override
    public String getKey(UserInfo entity) {
        if(entity != null) {
            return entity.getUserPhoneNum();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(UserInfo entity) {
        return entity.getUserPhoneNum() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
}
